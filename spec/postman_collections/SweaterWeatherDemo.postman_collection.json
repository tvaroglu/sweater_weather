{
	"info": {
		"_postman_id": "6bf7573d-9107-41d7-bd99-aedff8bb4487",
		"name": "SweaterWeatherDemo",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Registration",
			"item": [
				{
					"name": "Brand New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"User Created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['data']['type']).to.eql('user');",
									"    pm.expect(jsonData['data']['attributes']['email']).to.eql('whatever@example.com');",
									"    pm.expect(jsonData['data']['attributes']['api_key']).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"whatever@example.com\",\n  \"password\": \"password\",\n  \"password_confirmation\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Already Exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(422);",
									"});",
									"",
									"pm.test(\"User Already Exists Error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['errors']).to.eql(['Email has already been taken']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"whatever@example.com\",\n  \"password\": \"password\",\n  \"password_confirmation\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password Confirmation Mismatch",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(422);",
									"});",
									"",
									"pm.test(\"Password Confirmation Mismatch Error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['errors']).to.eql([\"Password confirmation doesn't match Password\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"guest@example.com\",\n  \"password\": \"password\",\n  \"password_confirmation\": \"PASSWORD\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Password Confirmation Missing",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Password Confirmation Missing Error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['errors']).to.eql([\"'password_confirmation' is required to create a user account\"]);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User Login",
			"item": [
				{
					"name": "Existing User Valid Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"User Session Created\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['data']['type']).to.eql('user');",
									"    pm.expect(jsonData['data']['attributes']['email']).to.eql('whatever@example.com');",
									"    pm.expect(jsonData['data']['attributes']['api_key']).to.not.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"whatever@example.com\",\n  \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/sessions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Existing User Invalid Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(401);",
									"});",
									"",
									"pm.test(\"Incorrect Password Error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['errors']).to.eql(['invalid credentials provided, please try again']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"whatever@example.com\",\n  \"password\": \"passwOrd\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/sessions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Existing User Missing Password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(401);",
									"});",
									"",
									"pm.test(\"Password Missing Error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['errors']).to.eql(['invalid credentials provided, please try again']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"whatever@example.com\"\n//   \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/sessions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"sessions"
							]
						}
					},
					"response": []
				},
				{
					"name": "User Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(401);",
									"});",
									"",
									"pm.test(\"User Not Found Error\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['errors']).to.eql(['invalid credentials provided, please try again']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"email\": \"foo@bar.com\",\n  \"password\": \"password\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/sessions",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"sessions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Landing Page",
			"item": [
				{
					"name": "Forecast",
					"item": [
						{
							"name": "Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['data']['id']).to.be.null;",
											"    pm.expect(jsonData['data']['type']).to.eql('forecast');",
											"    pm.expect(Object.keys(jsonData['data']['attributes']['current_weather']).length).to.eql(10);",
											"    pm.expect(jsonData['data']['attributes']['daily_weather'].length).to.eql(5);",
											"    pm.expect(jsonData['data']['attributes']['hourly_weather'].length).to.eql(8);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/forecast?location=denver,co",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"forecast"
									],
									"query": [
										{
											"key": "location",
											"value": "denver,co"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Empty Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid city and state']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/forecast?location=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"forecast"
									],
									"query": [
										{
											"key": "location",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Missing Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid city and state']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/forecast",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"forecast"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Book Search",
					"item": [
						{
							"name": "Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['data']['id']).to.be.null;",
											"    pm.expect(jsonData['data']['type']).to.eql('books');",
											"    pm.expect(jsonData['data']['attributes']['destination']).to.eql('denver,co');",
											"    pm.expect(Object.keys(jsonData['data']['attributes']['forecast']).length).to.eql(2);",
											"    pm.expect(jsonData['data']['attributes']['total_books_found']).to.not.be.null;",
											"    pm.expect(jsonData['data']['attributes']['books'].length).to.eql(5);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/book-search?location=denver,co&quantity=5",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"book-search"
									],
									"query": [
										{
											"key": "location",
											"value": "denver,co"
										},
										{
											"key": "quantity",
											"value": "5"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Empty Location Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid city and state']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/book-search?location=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"book-search"
									],
									"query": [
										{
											"key": "location",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Missing Location Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid city and state']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/book-search",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"book-search"
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Bad Quantity Param (Non Integer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid quantity']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/book-search?location=denver,co&quantity=dgsdgdsg",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"book-search"
									],
									"query": [
										{
											"key": "location",
											"value": "denver,co"
										},
										{
											"key": "quantity",
											"value": "dgsdgdsg"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Bad Quantity Param (Integer)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid quantity']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/book-search?location=denver,co&quantity=0",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"book-search"
									],
									"query": [
										{
											"key": "location",
											"value": "denver,co"
										},
										{
											"key": "quantity",
											"value": "0"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Empty Quantity Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid quantity']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/book-search?location=denver,co&quantity=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"book-search"
									],
									"query": [
										{
											"key": "location",
											"value": "denver,co"
										},
										{
											"key": "quantity",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Missing Quantity Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid quantity']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/book-search?location=denver,co",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"book-search"
									],
									"query": [
										{
											"key": "location",
											"value": "denver,co"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Image Search",
					"item": [
						{
							"name": "Valid Request",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Successful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(200);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['data']['id']).to.be.null;",
											"    pm.expect(jsonData['data']['type']).to.eql('image');",
											"    pm.expect(Object.keys(jsonData['data']['attributes']['image']).length).to.eql(2);",
											"    pm.expect(jsonData['data']['attributes']['image']['location']).to.eql('denver,co');",
											"    pm.expect(Object.keys(jsonData['data']['attributes']['credit']).length).to.eql(3);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/backgrounds?location=denver,co",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"backgrounds"
									],
									"query": [
										{
											"key": "location",
											"value": "denver,co"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Empty Location Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid city and state']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/backgrounds?location=",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"backgrounds"
									],
									"query": [
										{
											"key": "location",
											"value": ""
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Invalid Request - Missing Location Param",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Unsuccessful GET Request\", function () {",
											"    pm.expect(pm.response.code).to.eql(400);",
											"});",
											"",
											"pm.test(\"JSON Response Validation\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
											"    pm.expect(jsonData['errors']).to.eql(['please provide a valid city and state']);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "http://localhost:3000/api/v1/backgrounds",
									"protocol": "http",
									"host": [
										"localhost"
									],
									"port": "3000",
									"path": [
										"api",
										"v1",
										"backgrounds"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Road Trip",
			"item": [
				{
					"name": "Authenticated User - Valid Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['data']['id']).to.be.null;",
									"    pm.expect(jsonData['data']['type']).to.eql('roadtrip');",
									"    pm.expect(Object.keys(jsonData['data']['attributes']).length).to.eql(4);",
									"    pm.expect(jsonData['data']['attributes']['start_city']).to.eql('Denver,CO');",
									"    pm.expect(jsonData['data']['attributes']['end_city']).to.eql('Pueblo,CO');",
									"    pm.expect(Object.keys(jsonData['data']['attributes']['weather_at_eta']).length).to.eql(2);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"origin\": \"Denver,CO\",\n  \"destination\": \"Pueblo,CO\",\n  \"api_key\": \"012ffeafdc8dd8b182718f9240\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/road_trip",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"road_trip"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticated User - Invalid Route",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(201);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['data']['id']).to.be.null;",
									"    pm.expect(jsonData['data']['type']).to.eql('roadtrip');",
									"    pm.expect(Object.keys(jsonData['data']['attributes']).length).to.eql(4);",
									"    pm.expect(jsonData['data']['attributes']['start_city']).to.eql('Denver,CO');",
									"    pm.expect(jsonData['data']['attributes']['end_city']).to.eql('London,UK');",
									"    pm.expect(jsonData['data']['attributes']['travel_time']).to.eql('Impossible Route');",
									"    pm.expect(Object.keys(jsonData['data']['attributes']['weather_at_eta']).length).to.eql(2);",
									"    pm.expect(jsonData['data']['attributes']['weather_at_eta']['temperature']).to.be.null;",
									"    pm.expect(jsonData['data']['attributes']['weather_at_eta']['conditions']).to.be.null;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"origin\": \"Denver,CO\",\n  \"destination\": \"London,UK\",\n  \"api_key\": \"012ffeafdc8dd8b182718f9240\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/road_trip",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"road_trip"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthenticated User - Bad API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(401);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
									"    pm.expect(jsonData['errors']).to.eql(['invalid API key']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"origin\": \"Denver,CO\",\n  \"destination\": \"Pueblo,CO\",\n  \"api_key\": \"fdsfsdf\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/road_trip",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"road_trip"
							]
						}
					},
					"response": []
				},
				{
					"name": "Unauthenticated User - Missing API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(401);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
									"    pm.expect(jsonData['errors']).to.eql(['invalid API key']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"origin\": \"Denver,CO\",\n  \"destination\": \"London,UK\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/road_trip",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"road_trip"
							]
						}
					},
					"response": []
				},
				{
					"name": "Authenticated User - Missing Route Params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Unsuccessful POST Request\", function () {",
									"    pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"JSON Response Validation\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['message']).to.eql('your query could not be completed');",
									"    pm.expect(jsonData['errors']).to.eql(['origin and destination are required to plan a route']);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"origin\": \"Denver,CO\",\n  \"api_key\": \"012ffeafdc8dd8b182718f9240\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://localhost:3000/api/v1/road_trip",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "3000",
							"path": [
								"api",
								"v1",
								"road_trip"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}
